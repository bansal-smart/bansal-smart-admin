<%- include('../layouts/header') %>
<style>
    *,
    tr,
    td,
    p,
    small {
        font-size: 14px
    }
    td p{display: inline-flex!important;}
     td img{width: 60px; height:60px;}
    mjx-container[jax="CHTML"][display="true"]{display: inline;}
</style>
<script type="text/javascript" id="MathJax-script" async
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js">
</script>
<section class="content-body">
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header d-flex align-items-center justify-content-between">
                                                   <ul class="nav nav-pills">
  <li class="nav-item">
     <a class="nav-link" href="/admin/live-test-show/<%= exam.id %>">Live Test Details</a>
  </li>
   <!-- <li class="nav-item">
     <a class="nav-link" href="/admin/exam-list">Exam List</a>
  </li> -->
  <li class="nav-item">
    <a class="nav-link active"  href="/admin/live-test-question-list/<%= exam.id %>">Question List</a>
  </li>

</ul>

                        <div class="row">
                            <div class="col-12 text-end">

<!-- 
                                <a class="btn btn-info btn-sm" href="<%= create_url %>">
                                    <i class="fas fa-plus"></i>
                                </a> -->
                            <button type="button" id="backButton" class="btn btn-primary btn-sm">
                                    <i class="fa fa-arrow-left"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <h4>Question List of Exam : <%= exam.test_name %></h4>
                        <hr>
                        <div class="table-responsive">

  <table class="table table-bordered">
    <thead class="table-secondary">
      <tr>
        <% headers.forEach(h => { %>
          <th><%- h %></th>
        <% }) %>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
  <% rows.forEach(row => { %>
    <tr>
      <td><%= row.id %></td>

      <td>
        <div><%- row['question'] || '' %></div>
      <%= row['Question image'] %>
       
      </td>

      <td><%- row['question_type'] || '' %></td>
      <td><%- row['optionA'] || '' %></td>
      <td><%- row['optionB'] || '' %></td>
      <td><%- row['optionC'] || '' %></td>
      <td><%- row['optionD'] || '' %></td>
      <td><%- row['answer'] || '' %></td>
       <td>
        
            <a class="btn btn-sm btn-danger ms-2" href="/delete/<%= row.id %>">Delete</a>
          </td>
    </tr>
  <% }) %>
</tbody>
    <!-- <tbody>
      <% rows.forEach(row => { %>
        <tr>
          <% headers.forEach(h => { %>
            <td><%- row[h] || '' %></td>
          <% }) %>
          <td>
        
            <a class="btn btn-sm btn-danger ms-2" href="/delete/<%= row.id %>">Delete</a>
          </td>
        </tr>
      <% }) %>
    </tbody> -->
  </table>
                            
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


</div>
<%- include('../layouts/footer') %>
<script>
      // Re-render MathJax after DOM load
      window.addEventListener('DOMContentLoaded', () => {
        if (window.MathJax) MathJax.typeset();
      });
    </script>

     <script>
      const editors = {};

      class MyBase64UploadAdapter {
        constructor(loader) { this.loader = loader; }
        upload() {
          return this.loader.file.then(file => {
            return new Promise((resolve, reject) => {
              const reader = new FileReader();
              reader.onload = () => resolve({ default: reader.result });
              reader.onerror = error => reject(error);
              reader.readAsDataURL(file);
            });
          });
        }
        abort() {}
      }

      function MyCustomUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = loader => {
          return new MyBase64UploadAdapter(loader);
        };
      }

      document.querySelectorAll('textarea').forEach(textarea => {
        ClassicEditor.create(textarea, {
          extraPlugins: [MyCustomUploadAdapterPlugin],
          image: {
            toolbar: ['imageTextAlternative', '|', 'imageStyle:full', 'imageStyle:side', '|', 'imageUpload']
          },
          mediaEmbed: { previewsInData: true }
        }).then(editor => {
          editors[textarea.id] = editor;
        }).catch(console.error);
      });

      function submitEditors() {
        for (const id in editors) {
          const data = editors[id].getData();
          document.getElementById(id).value = data;
        }
        return true;
      }
    </script>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const currentPath = window.location.pathname;
    const links = document.querySelectorAll(".nav-link");

    links.forEach(link => {
      const linkPath = new URL(link.href).pathname;

      if (currentPath === linkPath) {
        link.classList.add("active");
      } else {
        link.classList.remove("active");
      }
    });
  });
</script>
